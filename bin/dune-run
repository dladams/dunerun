#!/bin/bash
#
# dune-run
# David Adams
# March 2022
#
# A script to run  a command in a dunesw enviroment.

ENV=dunesw
REL=$(dunerunRelease)
LEVEL=0
ERREXIT=
while [[ $# -gt 0 ]]; do
  ARG=$1
  if [ "$ARG" = "-h" ]; then
    echo "Usage: $0 [-e ENV] [-r REL] [-d LEVEL] [-x] COM"
    echo "Runs command COM in the environment defined by \"source setup-ENV.sh REL\""
    echo "  ENV - Environment name is any of"
    echo "          dune - Sets up dune w/o any packages."
    echo "          dunesw - Sets up dune w/ dunesw with argument REL."
    echo "          dunebuild - Sets up dunesw with argument REL plus packages"
    echo "                      needed to build other DUNE packages (cmake, studio)."
    echo "          pkgname - Name of any analyis package installed alongside dunerun."
    echo "          xrdhdf5 - Switch to version of xrootd that can stream hdf5."
    echo "          pkg1,pkg2... - Sensible list of packages to set up in turn."
    echo "        If '.', the command is run without setup."
    echo "        Default is dunesw."
    echo "  REL - Release tag passed to the environment setup script."
    echo "        For dunesw, this can be"
    echo "          -- VERS or VERS:QUAL where VERS is the version and QUAL is the"
    echo "             qualifier (e.g. v09_42_03_00 or v09_42_03_00:c7:prof),"
    echo "          -- the path to file that sets up a local build or installation"
    echo "             of dunesw, or"
    echo "          -- the path to a directory holding a local build made with"
    echo "             dune-dev (See https://github.com/dladams/dune-dev)"
    echo "        Default is $DUNE_VERSION:$DUNE_QUALIFIER (defined in dunerun set up)"
    echo "  LEVEL - 0 - Command is executed with no output from this script or"
    echo "              from the setup (default)"
    echo "          1 - Command is executed with informational messages."
    echo "          2 - Command and informational messages are displayed w/o execution."
    echo "Command 'shell' starts an interactive bash shell in the environment."
    echo "If the flag -x is given, exit the current shell if there is an error."
    exit 0
  elif [ "$ARG" = "-r" ]; then
    shift
    REL=$1
    shift
  elif [ "$ARG" = "-e" ]; then
    shift
    ENV=$1
    shift
  elif [ "$ARG" = "-d" ]; then
    shift
    LEVEL=${1:-0}
    shift
  elif [ "$ARG" = "-x" ]; then
    shift
    ERREXIT=true
  elif [ "${ARG:0:1}" = "-" ]; then
    echo Invalid flag: $ARG
    exit 1
  else
    COM="$@"
    break
  fi
done

MYNAME="dune-run:"
if [ $LEVEL -gt 0 ]; then
  echo "$MYNAME ENV: $ENV"
  echo "$MYNAME REL: $REL"
  echo "$MYNAME LEVEL: $LEVEL"
  echo "$MYNAME COM: $@"
fi

if [ "$COM" = shell ]; then
  if [ $LEVEL -gt 0 ]; then
    echo "$MYNAME Starting shell..."
    echo "$MYNAME User prompt is $PS1"
  fi
  bash --rcfile <(echo 'source dune-run -d '$LEVEL' -e '$ENV' -r '$REL -x)
  if [ $? -eq 0 ]; then
    echo "$MYNAME Exited dunerun shell with env $ENV."
  fi

else

  # Flag indicating command should be run, i.e. set up succeeded.
  RUNCOM=true
  if [ -n "$ENV" -a "$ENV" != "." ]; then
    # Set SAMEREL if requested and installed releases are the same.
    if [ "$REL" = "$(dunerunRelease)" ]; then
      SAMEREL=true
    else
      SAMEREL=false
    fi
    # Loop over the comma-separeted list of products.
    for MYENV in $(echo $ENV | sed s'/,/ /g'); do
      # Array of failed setup file locations.
      NOTFS=()
      SUPARG=
      # Check if there is a setup defined here for the product.
      # Allowed values include dune, dunesw and dunebuild.
      SUPFILE_LOCAL=./setup-$MYENV.sh
      SUPFILE_DUNERUN=$DUNERUN_DIR/bin/setup-$MYENV.sh
      if [ -r $SUPFILE_LOCAL ]; then
        SUPARG=$REL
        SUPFILE=$SUPFILE_LOCAL
      elif [ -r $SUPFILE_DUNERUN ]; then
        SUPARG=$REL
        SUPFILE=$SUPFILE_DUNERUN
      else
        NOTFS=(${NOTFS[@]} $SUPFILE)
        SUPFILE=
        # Next check this a package installed in the current release
        # iff no release is specified.
        if [ $SAMEREL = true ]; then
          if [ "$DUNE_INSTALL_BYPKG" = false ]; then
            SUPFILE=$DUNE_INSTALL_DIR/setup/setup-$MYENV.sh
          else
            SUPFILE=$DUNE_INSTALL_DIR/$MYENV/setup.sh
          fi
          if [ ! -r $SUPFILE ]; then
            NOTFS=(${NOTFS[@]} $SUPFILE)
              SUPFILE=
            SUPFILE=
          fi
        fi
      fi
      # Exit with error if package setup file was not found.
      if [ -z "$SUPFILE" ]; then
        echo -n "$MYNAME ERROR: Unable to find setup for $MYENV at"
        if [ ${#NOTFS[@]} -eq 2 ]; then
          echo -n " either of"
        elif [ ${#NOTFS[@]} -gt 2 ]; then
          echo -n " any of"
        fi
        echo ":"
        for NOTF in ${NOTFS[@]}; do
          echo "$MYNAME   $NOTF"
        done
        if [ $SAMEREL = false ]; then
          echo "$MYNAME Local packages are not set up because requested and installed"
          echo "$MYNAME release tags do not match: $REL != $(dunerunRelease)"
        fi
        if [ -n "$ERREXIT" ]; then
          echo "$MYNAME Exiting shell."
          exit 14
        fi
        RUNCOM=false
        break
      fi
      # Set up the package.
      if [ $LEVEL -gt 0 ]; then echo $MYNAME Setting up $MYENV $SUPARG; fi
      PS1=
      if [ $LEVEL -eq 2 ]; then
        echo $MYNAME '>' source $SUPFILE $SUPARG '2>&1 1>/dev/null'
      elif [ $LEVEL -eq 0 ]; then
        source $SUPFILE $SUPARG 2>&1 1>/dev/null
      else
        source $SUPFILE $SUPARG
      fi
      # Set the prompt in case this is used to set up a shell.
      # If the setup script does not define PS1, use the pCKAGE NAME.Dse NEWPS1 if the setup script defined it.
      if [ -z "$PS1" ]; then
        PS1=$MYENV'> '
      fi
      export PS1
    done
  fi

  if [ $RUNCOM = true -a $# -gt 0 ]; then
    if [ $LEVEL -gt 0 ]; then echo $MYNAME Executing.; fi
    if [ $LEVEL -eq 2 ]; then
      echo $MYNAME '>' $@
    else
      if [ ${#@} -gt 0 ]; then
        $@
        if [ $? -ne 0 ]; then
          echo Failed command: $@
        fi
      fi
    fi
  fi

fi
