#!/bin/sh

# David Adams
# April 2022
#
# Scripts for running and building DUNE SW.
#
# The installation of this package creates a setup file that
# - adds its own shell scripts to the executable path
# - adds its python modules to the python path
# - defines the env variables for installing and building
#   other packages:
#
# Flag   Variable              [Default]
#   -v   DUNE_VERSION
#   -q   DUNE_QUALIFIER        [depends on DUNE_VERSION, e.g. e20:prof]
#   -i   DUNE_INSTALL_DIR      [$HOME/dune/install/$(basename $DUNE_VERSION)]
#   -b   DUNE_BUILD_DIR        [$DUNE_INSTALL_DIR/../build]
#   -p   DUNE_INSTALL_BYPKG    [true]
#
# If DUNE_VERSION is provided by flag then default values are assigned for
# the others if they are not so provided.
#
# If the values for the build or installation directiories include
# the fields %VERSION% or %QUAL%, then those are respectively
# replaced with the rectified values of DUNE_VERSION and DUNE_QUALIFIER.
# Rectified means that any occurence of ':' replaced with '_'.
#
# If DUNE_VERSION is not specified on the command line, then all values
# are taken from the environment, i.e. the build follws the dunerun
# build convention.
#
# Conforming packages (including this one) are expected to provide
# a top-level build and installation script that installs at
#   DUNE_INSTALL_DIR          if DUNE_INSTALL_BYPKG = false
#   DUNE_INSTALL_DIR/<MYPKG>  otherwise
# Build is done at
#   DUNE_BUILD_DIR/<MYPKG>
# where <MYPKG> denotes the package name and the build directory
# may be safely deleted after installation.
# Conforming packages are no longer required to substitute for
# %VERSION as the setup generated by this package should be run first.
#
# 29mar2022 - Conforms with dunerun build 1.0.1
# 26oct2022 - Drop option to build with update of existing env.

rectify() {
  echo $1 | sed 's/:/_/g'
}

# Return the default quailifier for a release.
default_qualifier() {
  local VERS
  VERS=$1
  echo e20:prof
}

# Replace %VERSION% and $QUAL% in a string with the supplied
# version and qualifier.
fix_version_qualifier() {
  local NAME
  local VERS
  local QUAL
  local SOUT
  NAME=$1
  VERS=$(rectify $2)
  QUAL=$(rectify $3)
  SOUT=$(echo $NAME | sed s"#%VERS%#$VERS#g" | sed "s#%QUAL%#$QUAL#g")
  echo $SOUT
}

PROJECT=dunerun

# Assign default configuration.
HELP=false
MSG=
OPTS=()
VERS=
QUAL=
INSBAS=
BLBBAS=
BYPKG=
while [ $# -gt 0 ]; do
  FLG=$1
  shift
  if [ ${FLG:0:1} != '-' -o ${#FLG} -ne 2 ]; then
    OPTS+=($FLG)
  elif [ $FLG = '-h' ]; then
    HELP=true
    break
  else
    VAL=$1
    shift
    if [ -z "$VAL" ]; then
      MSG="Value missing for option $FLG"
    elif [ $FLG = "-i" ]; then
      INSBAS=$VAL
    elif [ $FLG = "-b" ]; then
      BLDBAS=$VAL
    elif [ $FLG = "-p" ]; then
      BYPKG=$VAL
    elif [ $FLG = "-v" ]; then
      VERS=$VAL
    elif [ $FLG = "-q" ]; then
      QUAL=$VAL
    fi
  fi
done
if [ ${#MSG} -gt 0 ]; then
  echo "ERROR: $MSG"
  exit 1
fi

if [ "$HELP" = true ]; then
  echo "Usage: $0 -v VERSION [-q QUAL] [-i INSBAS] [-b BLDBAS] [-p BYPKG] [ARG1 [ARG2 ...]]"
  echo "   or: $0  (to update the currently set up installatiin)"
  echo "  Options:"
  echo "    VERSION - DUNE product version."
  echo "       QUAL - DUNE qualifier ."
  echo "     INSBAS - Base installation directory."
  echo "     BLDBAS - Base build directory."
  echo "      BYPKG - false: install at BLDBAS."
  echo "              true: install at BLDBAS/dunerun."
  echo "  Allowed values for ARGi:"
  echo "       show - show the configuration"
  echo "    install - install from the build area"
  echo "     remove - remove the installation"
  echo "If no options are provided, install is used."
  echo "The run-time set up of the the installed package will use the "
  echo "options values to define the buiuld environment for other packages."
  echo "Details at: https://github.com/dladams/dunerun"
  exit 0
fi

MSGS=()
# If the DUNE version was supplied, then make sure we have the
# other configuration variables.
if [ -n "$VERS" ]; then
  VERN=$(basename $VERS)
  # QUAL
  if [ -z "$QUAL"  ]; then
    if [ $VERN = $VERS ]; then
      QUAL=$(default_qualifier $VERS)
    else
      QUAL=no-qualifier
    fi
  fi
  # INSBAS
  if [ -z "$INSBAS" ]; then
    INSBAS=${DUNE_INSTALL_BASE:-$HOME/dune/install/%VERS%}
  fi
  echo AAA $INSBAS
  echo fix_version_qualifier $INSBAS $VERS $QUAL
  INSBAS=$(fix_version_qualifier $INSBAS $VERN $QUAL)
  echo BBB $INSBAS
  # BLDBAS
  if [ -z "$BLDBAS" ]; then
    BLDBAS=${DUNE_BUILD_BASE:-/tmp/$USER/dunerun/build/%VERS%}
  fi
  BLDBAS=$(fix_version_qualifier $BLDBAS $VERN $QUAL)
  # BYPKG
  if [ -z "$BYPKG" ]; then
    BYPKG=true
  fi
else
  if [ -n "$QUAL" ]; then
    MSGS+=("DUNE_QUALIFIER may not be supplied without DUNE_VERSION")
  fi
  if [ -n "$INSBAS" ]; then
    MSGS+=("DUNE_INSTALL_DIR may not be supplied without DUNE_VERSION")
  fi
  if [ -n "$BLDBAS" ]; then
    MSGS+=("DUNE_BUILD_DIR may not be supplied without DUNE_VERSION")
  fi
  if [ -n "$BYPKG" ]; then
    MSGS+=("DUNE_BYPKG may not be supplied without DUNE_VERSION")
  fi
  VERS=$DUNE_VERSION
  QUAL=$DUNE_QUALIFIER
  BYPKG=$DUNE_INSTALL_BYPKG
  INSBAS=$DUNE_INSTALL_DIR
  BLDBAS=$DUNE_BUILD_DIR
  if [ -z "$DUNE_VERSION" ]; then
    MSGS+=("DUNE_VERSION must be set.")
  fi
  if [ -z "$DUNE_QUALIFIER" ]; then
    MSGS+=("DUNE_QUALIFIER must be set.")
  fi
  if [ -z "$DUNE_INSTALL_BYPKG" ]; then
    MSGS+=("DUNE_INSTALL_BYPKG must be set.")
  fi
  if [ -z "$DUNE_INSTALL_DIR" ]; then
    MSGS+=("DUNE_INSTALL_DIR must be set.")
  fi
  if [ -z "$DUNE_BUILD_DIR" ]; then
    MSGS+=("DUNE_BUILD_DIR must be set.")
  fi
fi

if [ ${#MSGS} -gt 0 ]; then
  for MSG in "${MSGS[@]}"; do
    echo "ERROR: $MSG"
  done
  exit 4
fi

if [ ${VERS:0:1} = v ]; then
  echo DUNE version $VERS is a release.
elif [ ${VERS:0:1} = '/' ]; then
  echo DUNE version $VERS is a local build directory.
  if [ ! -d $VERS ]; then
    echo "ERROR: Local build directory does not exist"
    exit 2
  fi
  if [ ! -r $VERS/setup.sh -a ! -r $VERS/dunesetup.sh ]; then
    echo "ERROR: Local build directory must contain either setup.sh or dunesetup.sh"
    exit 3
  fi
else
  echo "ERROR: DUNE version $VERS is not valid."
  exit 4
fi

# Assign source directory.
SRCDIR=$(dirname $0)
SRCDIR=$(readlink -f $SRCDIR)


# Assign install directory.
if [ ! -r $INSBAS -o ! -d $INSBAS ]; then
  echo Creating base installation directory: $INSBAS
  mkdir -p $INSBAS
  if [ ! -r $INSBAS -o ! -d $INSBAS ]; then
    echo ERROR: Unable to create/use base installation directory: $INSBAS
    exit 1
  fi
fi
if [ ! -r $BLDBAS -o ! -d $BLDBAS ]; then
  mkdir -p $BLDBAS
  if [ ! -r $BLDBAS -o ! -d $BLDBAS ]; then
    echo ERROR: Unable to create/use base build directory: $_BLDBAS
    exit 1
  fi
fi
if [ $BYPKG = true ]; then
  INSDIR=$INSBAS/$PROJECT
else
  INSDIR=$INSBAS
fi
INSDIR=$(readlink -f $INSDIR)

CATFILE=$INSDIR/.$PROJECT.cat

# Check DUNE version and qualifier.
if [ -z "$VERS" ]; then
  echo "ERROR: DUNE_VERSION must be defined or set with -v"
  exit 1
fi

# Process arguments.
if [ ${#OPTS[@]} -eq 0 ]; then OPTS=(install); fi
DOCLEANBUILD=
DOCLEANINSTALL=
DOCMAKE=
DOBUILD=
DOINSTALL=
for OPT in ${OPTS[@]}; do
  if [ "$OPT" = remove ]; then
    echo Cleaning...
    if [ -r $CATFILE ]; then
      DIRS=()    # Dirs are deleted last
      for FILE in $(cat $CATFILE) $CATFILE; do
        if [ ! -r $FILE ]; then
          echo "  WARNING: file not found: $FILE"
        else
          if [ -d $FILE ]; then
            DIRS=($FILE ${DIRS[@]})
          else
            echo "  Removing file $FILE."
            rm $FILE
          fi
        fi
      done
      for DIR in ${DIRS[@]}; do
        PYC=$DIR/__pycache__
        if [ -d $PYC ]; then
          echo "  Removing cache $PYC"
          rm -rf $PYC
        fi
        echo "  Removing directory $DIR"
        rmdir $DIR
      done
    else
      echo "  WARNING: Calalog not found: $CATFILE"
    fi
    DOCLEANINSTALL=true
  elif [ $OPT = show ]; then
    echo "Build configuration:"
    echo "     Source directory: $SRCDIR"
    echo "    Install directory: $INSDIR"
    echo "         Catalog file: $CATFILE"
    echo "Setup configuration:"
    echo "         DUNE version: $VERS"
    echo "       DUNE qualifier: $QUAL"
    echo "         Install base: $INSBAS"
    echo "           Build base: $BLDBAS"
    echo "     Build by package: $BYPKG"
  elif [ $OPT = install ]; then
    echo Installing $PROJECT...
    if [ $BYPKG = true ]; then
      if [ ! -d $INSDIR ]; then
        mkdir $INSDIR
      fi
      echo $INSDIR > $CATFILE
    else
      rm -f $CATFILE
      touch $CATFILE
    fi
    PYDIRS=(python python/dunerun python/dunerun/src)
    SUBDIRS=(bin ${PYDIRS[@]} ipynb)
    for SUBDIR in ${SUBDIRS[@]}; do
      DIR=$INSDIR/$SUBDIR
      if [ ! -d $DIR ]; then
        echo Creating $DIR
        mkdir $DIR
      fi
      echo $DIR >> $CATFILE
    done
    for FILE in $(ls $SRCDIR/bin); do
      INFILE=$SRCDIR/bin/$FILE
      OUTFILE=$INSDIR/bin/$FILE
      echo Installing $OUTFILE
      if [ -r $OUTFILE ]; then
        echo WARNING: Overwriting $OUTFILE
      fi
      if cp $INFILE $OUTFILE; then
        if [ ${FILE:0:5} != setup ]; then
          chmod +x $OUTFILE
        fi
        echo $OUTFILE >>$CATFILE
      fi
    done
    for PYDIR in $PYDIRS; do
      for FILE in $(cd $SRCDIR/$PYDIR; find . -name \*.py); do
        FILE=${FILE:2}    # Strip leading './'
        INFILE=$SRCDIR/$PYDIR/$FILE
        OUTFILE=$INSDIR/$PYDIR/$FILE
        echo Installing $OUTFILE
        if [ -r $OUTFILE ]; then
          echo WARNING: Overwriting $OUTFILE
        fi
        if cp $INFILE $OUTFILE; then
          if [ ${FILE:0:5} != setup ]; then
            chmod +x $OUTFILE
          fi
          echo $OUTFILE >>$CATFILE
        fi
      done
    done
    # Append env to setup.py
    PYSUP=$INSDIR/python/setup.py
    echo "os.environ['DUNERUN_DIR']        = '$INSDIR'" >>$PYSUP
    echo "os.environ['PATH']               = f\"$INSDIR/bin:{os.getenv('PATH')}\"" >>$PYSUP
    echo "os.environ['DUNE_INSTALL_DIR']   = '$INSBAS'" >>$PYSUP
    echo "os.environ['DUNE_BUILD_DIR']     = '$BLDBAS'" >>$PYSUP
    echo "os.environ['DUNE_INSTALL_BYPKG'] = '$BYPKG'" >>$PYSUP
    echo "os.environ['DUNE_VERSION']       = '$VERS'" >>$PYSUP
    echo "os.environ['DUNE_QUALIFIER']     = '$QUAL'" >>$PYSUP
    for FILE in $(ls $SRCDIR/ipynb/*.ipynb); do
      FILE=$(basename $FILE)
      INFILE=$SRCDIR/ipynb/$FILE
      OUTFILE=$INSDIR/ipynb/$FILE
      echo Installing $OUTFILE
      if [ -r $OUTFILE ]; then
        echo WARNING: Overwriting $OUTFILE
      fi
      if cp $INFILE $OUTFILE; then
        if [ ${FILE:0:5} != setup ]; then
          chmod +x $OUTFILE
        fi
        echo $OUTFILE >>$CATFILE
      fi
    done
    SUPFILE=$(readlink -f $INSDIR/setup.sh)
    if [ -r $SUPFILE ]; then
      rm $SUPFILE
    fi
    echo Creating setup file: $SUPFILE
    touch $SUPFILE
    echo 'export DUNERUN_DIR='$INSDIR >>$SUPFILE
    echo export PATH=$INSDIR/bin:'$PATH' >>$SUPFILE
    echo export PYTHONPATH=$INSDIR/python:'$PYTHONPATH' >>$SUPFILE
    echo export DUNE_INSTALL_DIR=$INSBAS >>$SUPFILE
    echo export DUNE_BUILD_DIR=$BLDBAS >>$SUPFILE
    echo export DUNE_INSTALL_BYPKG=$BYPKG >>$SUPFILE
    echo export DUNE_VERSION=$VERS >>$SUPFILE
    echo export DUNE_QUALIFIER=$QUAL >>$SUPFILE
    echo "export PS1='dunerun> '" >>$SUPFILE
    echo $SUPFILE >>$CATFILE
  else
    echo "WARNING: Ignoring invalid option: $OPT"
  fi
done
echo Done
if [ -n "$SUPFILE" -a -r "$SUPFILE" ]; then
  echo Set up with: source $SUPFILE
fi
