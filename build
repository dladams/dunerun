#!/bin/sh

# David Adams
# April 2022
#
# Scripts for running and building DUNE SW.
#
# The installation of this package creates a setup file that
# - adds its own shell scripts to the executable path
# - adds its python modules to the python path
# - defines the env variables for installing and building
#   other packages:
#
# Flag   Variable              [Default]
#   -i   DUNE_INSTALL_DIR      [$HOME/dune/install]
#   -b   DUNE_BUILD_DIR        [$DUNE_INSTALL_DIR/../build]
#   -p   DUNE_INSTALL_BYPKG    [true]
#   -v   DUNE_VERSION          [$DUNESW_VERSION or none]
#   -q   DUNE_QUALIFIER        [depends on DUNE_VERSION, e.g. e20:prof]
#
# In order of priority, the value assigned to each is
# - taken from the command line if provided with the indicated flag
# - taken from the current environment
# - assigned the indicated default
#
# If the values for the build or installation directiories include
# the fields %VERSION% or %QUAL%, then those are respectively
# replaced with the values for DUNE_VERSION and DUNE_QUALIFIER
# with amy occurence of ':' replaced with '-'.
#
# Conforming packages (including this one) are expected to provide
# a top-level build and installation script that installs at
#   DUNE_INSTALL_DIR          if DUNE_INSTALL_BYPKG = false
#   DUNE_INSTALL_DIR/<MYPKG>  otherwise
# Build is done at
#   DUNE_BUILD_DIR/<MYPKG>
# where <MYPKG> denotes the package name and teh build directory
# may be safely deleted after installation.
# Conforming packages are no longer required to substitute for
# %VERSION as the setup generated by this package should be run first.
#
# 29mar2022 - Conforms with dunerun build 1.0.1

_PROJECT=dunerun

# Assign default configuration.
_HELP=false
_INSBAS=${DUNE_INSTALL_DIR:-$HOME/dune/install}
_BLDBAS=$DUNE_BUILD_DIR
_BYPKG=true
_VERS=${DUNE_VERSION:-$DUNESW_VERSION}
_QUAL=$DUNE_QUALIFIER
_MSG=
_OPTS=()
while [ $# -gt 0 ]; do
  _FLG=$1
  shift
  if [ ${_FLG:0:1} != '-' -o ${#_FLG} -ne 2 ]; then
    _OPTS+=($_FLG)
  elif [ $_FLG = '-h' ]; then
    _HELP=true
    break
  else
    _VAL=$1
    shift
    if [ -z "$_VAL" ]; then
      _MSG="Value missing for option $_FLG"
    elif [ $_FLG = "-i" ]; then
      _INSBAS=$_VAL
    elif [ $_FLG = "-b" ]; then
      _BLDBAS=$_VAL
    elif [ $_FLG = "-p" ]; then
      if [ $_VAL = false ]; then _BYPKG=$_VAL; fi
    elif [ $_FLG = "-v" ]; then
      _VERS=$_VAL
    elif [ $_FLG = "-q" ]; then
      _QUAL=$_VAL
    fi
  fi
done
if [ ${#_MSG} -gt 0 ]; then
  echo "ERROR: $_MSG"
  exit 1
fi

if [ "$_HELP" = true ]; then
  echo Usage: $0 [-i INSBAS] [-b BLDBAS] [-p BYPKG] [-v VERSION] [-q QUAL] [ARG1 [ARG2 ...]]
  echo "  Options:"
  echo "     INSBAS - Base installation directory."
  echo "     BLDBAS - Base build directory."
  echo "      BYPKG - false: install at BLDBAS."
  echo "              true: install at BLDBAS/dunerun."
  echo "    VERSION - DUNE product version."
  echo "       QUAL - DUNE qualifier."
  echo "  Allowed values for ARGi:"
  echo "       show - show the configuration"
  echo "    install - install from the build area"
  echo "     remove - remove the installation"
  echo "If no options are provided, install is used."
  echo "The run-time set up of the the installed package will use the "
  echo "options values to define the buiuld environment for other packages."
  echo "Details at: https://github.com/dladams/dunerun"
  exit 0
fi

# Assign source directory.
_SRCDIR=$(dirname $0)
_SRCDIR=$(readlink -f $_SRCDIR)

# Assign qualifier.
if [ -z "$_QUAL" ]; then
  if [ -n "$_VERS" ]; then
    _QUAL=e20:prof
  else
    _QUAL=
  fi
fi

# If %VERSION% appears in the base installation or build directories, then
# the version must be defined.
if echo $_INSBAS $_BLDBAS | grep %VERSION% 1>/dev/null 2>/dev/null; then
  if [ -z "$_VERS" ]; then
    echo ERROR: DUNE version must be defined.
    exit 1
  fi
  _INSBAS=$(echo $_INSBAS | sed "s/%VERSION%/$_VERS/g")
  _BLDBAS=$(echo $_BLDBAS | sed "s/%VERSION%/$_VERS/g")
fi
  
# If %QUAL% appears in the base installation or build directories, then
# the version must be defined.
if echo $_INSBAS $_BLDBAS | grep %QUAL% 1>/dev/null 2>/dev/null; then
  if [ -z "$_QUAL" ]; then
    echo ERROR: DUNE qualifier must be defined.
    exit 1
  fi
  _INSBAS=$(echo $_INSBAS | sed "s/%QUAL%/$_QUAL/g")
  _BLDBAS=$(echo $_BLDBAS | sed "s/%QUAL%/$_QUAL/g")
fi

# Assign build base if not already defined.
if [ -z "$_BLDBAS" ]; then
  _BLDBAS=$(dirname $_INSBAS)/build
fi

# Assign install directory.
if [ ! -r $_INSBAS -o ! -d $_INSBAS ]; then
  echo Creating base installation directory: $_INSBAS
  mkdir -p $_INSBAS
  if [ ! -r $_INSBAS -o ! -d $_INSBAS ]; then
    echo ERROR: Unable to create/use base installation directory: $_INSBAS
    exit 1
  fi
fi
if [ ! -r $_BLDBAS -o ! -d $_BLDBAS ]; then
  mkdir -p $_BLDBAS
  if [ ! -r $_BLDBAS -o ! -d $_BLDBAS ]; then
    echo ERROR: Unable to create/use base build directory: $_BLDBAS
    exit 1
  fi
fi
if [ $_BYPKG = true ]; then
  _INSDIR=$_INSBAS/$_PROJECT
else
  _INSDIR=$_INSBAS
fi
_INSDIR=$(readlink -f $_INSDIR)

_CATFILE=$_INSDIR/.$_PROJECT.cat

# Check DUNE version and qualifier.
if [ -z "$_VERS" ]; then
  echo "ERROR: DUNE_VERSION must be defined or set with -v"
  exit 1
fi
if [ -z "$_QUAL" ]; then
  echo "ERROR: DUNE_QUALIFIER must be defined or set with -q"
  exit 1
fi

# Process arguments.
if [ ${#_OPTS[@]} -eq 0 ]; then _OPTS=(install); fi
DOCLEANBUILD=
DOCLEANINSTALL=
DOCMAKE=
DOBUILD=
DOINSTALL=
for _OPT in ${_OPTS[@]}; do
  if [ "$_OPT" = remove ]; then
    echo Cleaning...
    if [ -r $_CATFILE ]; then
      _DIRS=()    # Dirs are deleted last
      for _FILE in $(cat $_CATFILE) $_CATFILE; do
        if [ ! -r $_FILE ]; then
          echo "  WARNING: file not found: $_FILE"
        else
          if [ -d $_FILE ]; then
            _DIRS=($_FILE ${_DIRS[@]})
          else
            echo "  Removing file $_FILE."
            rm $_FILE
          fi
        fi
      done
      for _DIR in ${_DIRS[@]}; do
        echo "  Removing directory $_DIR"
        rmdir $_DIR
      done
    else
      echo "  WARNING: Calalog not found: $_CATFILE"
    fi
    DOCLEANINSTALL=true
  elif [ $_OPT = show ]; then
    echo "Build configuration:"
    echo "     Source directory: $_SRCDIR"
    echo "    Install directory: $_INSDIR"
    echo "         Catalog file: $_CATFILE"
    echo "Setup configuration:"
    echo "         Install base: $_INSBAS"
    echo "           Build base: $_BLDBAS"
    echo "     Build by package: $_BYPKG"
    echo "         DUNE version: $_VERS"
    echo "       DUNE qualifier: $_QUAL"
  elif [ $_OPT = install ]; then
    echo Installing $_PROJECT...
    if [ $_BYPKG = true ]; then
      if [ ! -d $_INSDIR ]; then
        mkdir $_INSDIR
      fi
      echo $_INSDIR > $_CATFILE
    else
      rm -f $_CATFILE
      touch $_CATFILE
    fi
    _PYDIRS=(python python/dunerun python/dunerun/src)
    _SUBDIRS=(bin ${_PYDIRS[@]} ipynb)
    for _SUBDIR in ${_SUBDIRS[@]}; do
      _DIR=$_INSDIR/$_SUBDIR
      if [ ! -d $_DIR ]; then
        echo Creating $_DIR
        mkdir $_DIR
      fi
      echo $_DIR >> $_CATFILE
    done
    for _FILE in $(ls $_SRCDIR/bin); do
      _INFILE=$_SRCDIR/bin/$_FILE
      _OUTFILE=$_INSDIR/bin/$_FILE
      echo Installing $_OUTFILE
      if [ -r $_OUTFILE ]; then
        echo WARNING: Overwriting $_OUTFILE
      fi
      if cp $_INFILE $_OUTFILE; then
        if [ ${_FILE:0:5} != setup ]; then
          chmod +x $_OUTFILE
        fi
        echo $_OUTFILE >>$_CATFILE
      fi
    done
    for _PYDIR in $_PYDIRS; do
      for _FILE in $(ls $_SRCDIR/$_PYDIR/*.py); do
        _FILE=$(basename $_FILE)
        _INFILE=$_SRCDIR/$_PYDIR/$_FILE
        _OUTFILE=$_INSDIR/$_PYDIR/$_FILE
        echo Installing $_OUTFILE
        if [ -r $_OUTFILE ]; then
          echo WARNING: Overwriting $_OUTFILE
        fi
        if cp $_INFILE $_OUTFILE; then
          if [ ${_FILE:0:5} != setup ]; then
            chmod +x $_OUTFILE
          fi
          echo $_OUTFILE >>$_CATFILE
        fi
      done
    done
    for _FILE in $(ls $_SRCDIR/ipynb/*.ipynb); do
      _FILE=$(basename $_FILE)
      _INFILE=$_SRCDIR/ipynb/$_FILE
      _OUTFILE=$_INSDIR/ipynb/$_FILE
      echo Installing $_OUTFILE
      if [ -r $_OUTFILE ]; then
        echo WARNING: Overwriting $_OUTFILE
      fi
      if cp $_INFILE $_OUTFILE; then
        if [ ${_FILE:0:5} != setup ]; then
          chmod +x $_OUTFILE
        fi
        echo $_OUTFILE >>$_CATFILE
      fi
    done
    _SUPFILE=$(readlink -f $_INSDIR/setup.sh)
    if [ -r $_SUPFILE ]; then
      rm $_SUPFILE
    fi
    echo Creating setup file: $_SUPFILE
    touch $_SUPFILE
    echo 'export DUNERUN_DIR='$_INSDIR >>$_SUPFILE
    echo export PATH=$_INSDIR/bin:'$PATH' >>$_SUPFILE
    echo export PYTHONPATH=$_INSDIR/python:'$PYTHONPATH' >>$_SUPFILE
    echo export DUNE_INSTALL_DIR=$_INSBAS >>$_SUPFILE
    echo export DUNE_BUILD_DIR=$_BLDBAS >>$_SUPFILE
    echo export DUNE_INSTALL_BYPACKAGE=$_BYPKG >>$_SUPFILE
    echo export DUNE_VERSION=$_VERS >>$_SUPFILE
    echo export DUNE_QUALIFIER=$_QUAL >>$_SUPFILE
    echo "export PS1='dunerun> '" >>$_SUPFILE
    echo $_SUPFILE >>$_CATFILE
  else
    echo "WARNING: Ignoring invalid option: $_OPT"
  fi
done
echo Done
if [ -n "$_SUPFILE" -a -r "$_SUPFILE" ]; then
  echo Set up with: source $_SUPFILE
fi
